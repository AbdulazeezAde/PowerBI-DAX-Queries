// Animated Donut Chart = 
VAR ProgressValue = [SLA Compliance Rate] * 100  // Current progress (0-100).

VAR Radius = 42  // Radius of the donut chart
VAR CircumferenceValue = 2 * PI() * Radius  // Full circumference of the circle
VAR ProgressLength = (ProgressValue / 100) * CircumferenceValue  // Length of the progress stroke

VAR CenterX = 60  // X-coordinate of the center
VAR CenterY = 60  // Y-coordinate of the center
VAR BackgroundStrokeWidth = 12  // Width of the background ring
VAR ProgressStrokeWidth = 16  // Width of the progress ring

// --- COLOR DEFINITIONS ---
VAR RedColor = "#FF0000" // Red color for low values (<50%)
VAR AmberColor = "#FFA500" // Amber color for medium values (50–80%)
VAR GreenColor = "#00FF00" // Green color for high values (>=80%)


// --- TARGET THRESHOLDS ---
// Determines the final color based on ProgressValue:
// - Below 50% = Red
// - 50–80% = Amber
// - 80%+ = Green
VAR FinalColor =
    SWITCH(
        TRUE(),
        ProgressValue < 76, RedColor,  // Target: <76% → Red
        ProgressValue < 86, AmberColor,  // Target: 50–80% → Amber
        GreenColor // Target: >=86% → Green
    )

RETURN
"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 120 120' width='260' height='260'>
<style>
    @keyframes progress-fill {
        0% { stroke-dashoffset: " & CircumferenceValue & "; stroke: " & RedColor & "; }
        33% { stroke-dashoffset: " & (CircumferenceValue - (CircumferenceValue * 0.5)) & "; stroke: " & AmberColor & "; }
        66% { stroke-dashoffset: " & (CircumferenceValue - (CircumferenceValue * 0.8)) & "; stroke: " & AmberColor & "; }
        100% { stroke-dashoffset: " & (CircumferenceValue - ProgressLength) & "; stroke: " & FinalColor & "; } // Final color depends on ProgressValue
    }

    .progress-ring {
        animation: progress-fill 2s ease-out forwards;
    }
</style>

<circle cx='" & CenterX & "' cy='" & CenterY & "' r='" & Radius & "' fill='none' stroke='#E0E0E0' stroke-width='" & BackgroundStrokeWidth & "'/>
